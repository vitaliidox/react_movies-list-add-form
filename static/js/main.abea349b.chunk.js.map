{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","validationUrl","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","isTitle","setTitle","isDescription","setDescription","isImgUrl","setImgUrl","isImdbUrl","setImdbUrl","isImdbId","setImdbId","pattern","link","match","isFieldsAreFill","onClick","preventDefault","disabled","App","moviesList","moviesFromServer","setMovies","moviesCurrentList","ReactDOM","render","document","getElementById"],"mappings":"mSAQaA,EAA6B,SAAH,OAAMC,EAAK,EAALA,MAAK,OAChD,sBAAKC,UAAU,OAAO,UAAQ,aAAY,UACxC,qBAAKA,UAAU,aAAY,SACzB,wBAAQA,UAAU,gBAAe,SAC/B,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAc,UAC3B,sBAAKA,UAAU,QAAO,UACpB,qBAAKA,UAAU,aAAY,SACzB,wBAAQA,UAAU,iBAAgB,SAChC,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAe,SAC5B,mBAAGA,UAAU,aAAY,SAAED,EAAMK,aAIrC,sBAAKJ,UAAU,UAAS,UACrBD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAQ,SAAC,iBAGxB,EC7BKC,EAA8B,SAAH,OAAMC,EAAM,EAANA,OAAM,OAClD,qBAAKT,UAAU,SAAQ,SACpBS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAS,CAERA,MAAOA,GADFA,EAAMY,OAEX,KAEA,E,gBCFD,IAAMC,EAA6B,SAAH,GAOhC,IANLC,EAAI,EAAJA,KACAC,EAAK,EAALA,MAAM,EAAD,EACLC,aAAK,MAAGF,EAAI,MACZG,gBAAQ,OAAQ,MAChBC,gBAAQ,MAAG,WAAO,EAAC,MACnBC,qBAAa,MAAG,kBAAM,CAAI,IAE1B,EAAaC,oBAAS,2BAASN,EAAI,YAX5BO,KAAKC,SAASC,WAAWC,MAAM,GAWkB,IAAjDC,EAAoD,iBAAlD,GAET,EAA6BL,oBAAS,GAAM,mBAArCM,EAAO,KAAEC,EAAS,KACnBC,EAAWF,GAAWT,IAAaF,EAEzC,OACE,sBAAKd,UAAU,QAAO,UACpB,uBAAOA,UAAU,QAAQ4B,QAASJ,EAAG,SAClCT,IAGH,qBAAKf,UAAU,UAAS,SACtB,uBACEwB,GAAIA,EACJ,0BAAkBX,GAClBb,UAAW6B,IAAW,QAAS,CAC7B,YAAaF,IAEfG,KAAK,OACLC,YAAW,gBAAWhB,GACtBD,MAAOA,EACPG,SAAU,SAAAe,GAAK,OAAIf,EAASe,EAAMC,OAAOnB,MAAM,EAC/CoB,OAAQ,kBAAMR,GAAU,EAAK,MAIhCC,GACC,mBAAG3B,UAAU,iBAAgB,mBAAKe,EAAK,mBAGvCG,EAAcJ,IAAUA,GACxB,mBAAGd,UAAU,iBAAgB,mBAAKe,EAAK,0BAI/C,ECnDaoB,EAA4B,SAAH,GAAmB,IAAbC,EAAK,EAALA,MAC1C,EAA0BjB,mBAAS,GAAE,mBAA9BkB,EAAK,KAAEC,EAAQ,KACtB,EAA4BnB,mBAAS,IAAG,mBAAjCoB,EAAO,KAAEC,EAAQ,KACxB,EAAwCrB,mBAAS,IAAG,mBAA7CsB,EAAa,KAAEC,EAAc,KACpC,EAA8BvB,mBAAS,IAAG,mBAAnCwB,EAAQ,KAAEC,EAAS,KAC1B,EAAgCzB,mBAAS,IAAG,mBAArC0B,EAAS,KAAEC,EAAU,KAC5B,EAA8B3B,mBAAS,IAAG,mBAAnC4B,EAAQ,KAAEC,EAAS,KAGpBC,EAAU,uKAEV/B,EAAgB,SAACgC,GACrB,OAAQA,EAAKC,MAAMF,IAAY,IAAI,KAAOC,CAC5C,EAEME,GAAmBb,IACrBI,IACAE,IACAE,IACA7B,EAAc2B,KACd3B,EAAc2B,GA8BlB,OACE,uBAAM7C,UAAU,WAAU,UACxB,oBAAIA,UAAU,QAAO,SAAC,gBAEtB,cAAC,EAAS,CACRa,KAAK,QACLE,MAAM,QACND,MAAOyB,EACPtB,SAAUuB,EACVxB,UAAQ,IAGV,cAAC,EAAS,CACRH,KAAK,cACLE,MAAM,cACND,MAAO2B,EACPxB,SAAUyB,IAGZ,cAAC,EAAS,CACR7B,KAAK,SACLE,MAAM,YACND,MAAO6B,EACP1B,SAAU2B,EACV5B,UAAQ,EACRE,cAAeA,IAGjB,cAAC,EAAS,CACRL,KAAK,UACLE,MAAM,WACND,MAAO+B,EACP5B,SAAU6B,EACV9B,UAAQ,EACRE,cAAeA,IAGjB,cAAC,EAAS,CACRL,KAAK,SACLE,MAAM,UACND,MAAOiC,EACP9B,SAAU+B,EACVhC,UAAQ,IAGV,qBAAKhB,UAAU,mBAAkB,SAC/B,qBAAKA,UAAU,UAAS,SACtB,wBACE8B,KAAK,SACL,UAAQ,gBACR9B,UAAU,iBACVqD,QAvEV,SACErB,GAEAA,EAAMsB,iBACFT,EAAUM,MAAMF,IAAYN,EAASQ,MAAMF,KAS7Cb,EARiB,CACfhC,MAAOmC,EACPlC,YAAaoC,EACbvC,OAAQyC,EACRpC,QAASsC,EACTlC,OAAQoC,IAjBZP,EAAS,IACTE,EAAe,IACfE,EAAU,IACVE,EAAW,IACXE,EAAU,IAmBRV,EAASD,EAAQ,GAErB,EAsDUkB,SAAUH,EAAgB,SAC3B,cApDyBf,EA2DpC,E,OC/GamB,EAAM,WACjB,IAAMC,EAAU,YAAOC,GACvB,EAA4BvC,mBAASsC,GAAW,mBAAzChD,EAAM,KAAEkD,EAAS,KAMxB,OACE,sBAAK3D,UAAU,OAAM,UACnB,qBAAKA,UAAU,eAAc,SAC3B,cAAC,EAAU,CAACS,OAAQA,MAEtB,qBAAKT,UAAU,UAAS,SACtB,cAAC,EAAQ,CAACoC,MAVF,SAACrC,GACb4D,GAAU,SAAAC,GAAiB,4BAAQA,GAAiB,CAAE7D,GAAQ,GAChE,QAYF,ECrBA8D,IAASC,OAAO,cAAC,EAAG,IAAKC,SAASC,eAAe,Q","file":"static/js/main.abea349b.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validationUrl?: (link: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  validationUrl = () => true,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {!validationUrl(value) && value && (\n        <p className=\"help is-danger\">{`${label} has incorrect URL`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd:(movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [isTitle, setTitle] = useState('');\n  const [isDescription, setDescription] = useState('');\n  const [isImgUrl, setImgUrl] = useState('');\n  const [isImdbUrl, setImdbUrl] = useState('');\n  const [isImdbId, setImdbId] = useState('');\n\n  // eslint-disable-next-line max-len\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  const validationUrl = (link: string): boolean => {\n    return (link.match(pattern) || [])[0] === link;\n  };\n\n  const isFieldsAreFill = !isTitle\n  || !isImgUrl\n  || !isImdbUrl\n  || !isImdbId\n  || !validationUrl(isImdbUrl)\n  || !validationUrl(isImdbUrl);\n\n  function clearForm() {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  }\n\n  function hendleSubmit(\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) {\n    event.preventDefault();\n    if (isImdbUrl.match(pattern) && isImgUrl.match(pattern)) {\n      const newMovie = {\n        title: isTitle,\n        description: isDescription,\n        imgUrl: isImgUrl,\n        imdbUrl: isImdbUrl,\n        imdbId: isImdbId,\n      };\n\n      onAdd(newMovie);\n      clearForm();\n\n      setCount(count + 1);\n    }\n  }\n\n  return (\n    <form className=\"NewMovie\" key={count}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={isTitle}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={isDescription}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={isImgUrl}\n        onChange={setImgUrl}\n        required\n        validationUrl={validationUrl}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={isImdbUrl}\n        onChange={setImdbUrl}\n        required\n        validationUrl={validationUrl}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={isImdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            onClick={hendleSubmit}\n            disabled={isFieldsAreFill}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const moviesList = [...moviesFromServer];\n  const [movies, setMovies] = useState(moviesList);\n\n  const onAdd = (movie: Movie) => {\n    setMovies(moviesCurrentList => [...moviesCurrentList, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}